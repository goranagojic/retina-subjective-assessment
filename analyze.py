import click
import pandas as pd
import matplotlib.pyplot as plt

from pathlib import Path


def _grade_stats(data, column):
    print(data.groupby([column, 'grading_score']).size())


def export_data(boxplot, out, xtickmapping=None, ytickmapping=None):

    xticklabels, yticklabels = None, None
    if xtickmapping is not None:
        xticklabels = [xtick.label.get_text() for xtick in boxplot.ax.axes.xaxis.majorTicks]
    if ytickmapping is not None:
        yticklabels = [ytick.label.get_text() for ytick in boxplot.ax.axes.yaxis.majorTicks]

    quartiles = boxplot[1]

    with open(out, "w") as f:
        for i in range(0, len(quartiles["boxes"])):
            # for every box there are two caps meaning that for each boxplot two
            # consecutive caps are needed (boxes[0] matches caps[0] and caps[1])
            lower_whisker_bound = quartiles["caps"][2 * i].get_ydata()[0]
            lower_box_bound = quartiles["boxes"][i].get_ydata()[0]
            median = quartiles["medians"][i].get_ydata()[0]
            upper_box_bound = quartiles["boxes"][i].get_ydata()[2]
            upper_whisker_bound = quartiles["caps"][2 * i + 1].get_ydata()[1]
            f.write(f"{i} {lower_whisker_bound} {lower_box_bound} {median} {upper_box_bound} {upper_whisker_bound}\n")

    if xticklabels is not None or yticklabels is not None:
        out_dir, out_filename = out.parent, out.stem
        with open(out_dir / f"{out_filename}-ticklabels.dat", "w") as fticks:
            if xticklabels is not None:
                mappings = [xtickmapping[xtl] for xtl in xticklabels if xtl in xtickmapping]
                fticks.write(f"xticklabels: {mappings}\n")
            if yticklabels is not None:
                mappings = [ytickmapping[ytl] for ytl in yticklabels if ytl in ytickmapping]
                fticks.write(f"yticklabels: {mappings}\n")


@click.group()
def analyze():
    pass


@analyze.command()
@click.option("-t", "--type", type=click.Choice(['boxplot', 'histogram']), required=True,
              help="Plot type. Currently supported are boxplot and histogram.")
@click.option("-i", "--input-file", type=click.Path(exists=True), required=True,
              help="A CSV file containing aggregated survey results along with 'grading_score' column.")
@click.option("-o", "--output-dir", type=click.Path(exists=False), required=True,
              help="Where to save plots generated by the function. If directory does not exist, it will be "
                   "created.")
@click.option("-s", "--show", is_flag=True, help="Show plots.")
def plot(type, input_file, output_dir, show):
    """Plots boxplots of grading scores for data groups.

    Groups and combinations plotted are:
        - networks
        - datasets
        - doctors
        - images
        - network, dataset
        - doctor, dataset
        - doctor, network

    Plots are saved to `output_dir` path. They can be optionally shown in runtime using -s flag.
    """

    # if it does not exist, create directory where plots will be stored
    output_dir = Path(output_dir)
    output_dir.mkdir(exist_ok=True, parents=True)

    data = pd.read_csv(input_file)
    data = data[data['surveyType'] == 'regular']    # do not use data from control surveys

    if type == "boxplot":
        r = data.boxplot(by=['network'], column=['grading_score'], grid=False, rot=45, return_type='both')
        export_data(
            boxplot=r[0],
            out=output_dir / "networks.dat",
            xtickmapping={
                "eswanet": "ESWANet",
                "iternet": "IterNet",
                "iternet_uni": "IterNet_UNI",
                "vesselunet": "DBUNet",
                "laddernet": "LadderNet",
                "vgan": "RVSGAN"
            }
        )
    else:
        data.hist(by='network', column='grading_score', grid=True,
                  bins=[-120, -100, -80, -60, -40, -20, 0, 20, 40, 60, 80, 100, 120])
    plt.savefig(str(output_dir / "networks.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['dataset'], column=['grading_score'], grid=False, rot=45, return_type='both')
        export_data(
            boxplot=r[0],
            out=output_dir / "dataset.dat",
            xtickmapping={
                'drive': "DRIVE",
                'stare': "STARE"
            }
        )
    else:
        data.hist(by='dataset', column='grading_score', grid=True,
                  bins=[-120, -100, -80, -60, -40, -20, 0, 20, 40, 60, 80, 100, 120])
    plt.savefig(str(output_dir / "dataset.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['network', 'dataset'], column=['grading_score'], grid=False, rot=45, return_type='both')
        export_data(
            boxplot=r[0],
            out=output_dir / "network-dataset.dat",
        )
        plt.savefig(str(output_dir / "network-dataset.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['doctorID'], column=['grading_score'], grid=False, rot=45, return_type='both')
        export_data(
            boxplot=r[0],
            out=output_dir / "doctor_id.dat",
            xtickmapping={
                "1": "Expert 1",
                "2": "Expert 2",
                "3": "Expert 3",
                "4": "Expert 4",
                "5": "Expert 5",
                "6": "Expert 6"
            }
        )
    else:
        data.hist(by=['doctorID'], column=['grading_score'], xrot=45,
                  bins=[-120, -100, -80, -60, -40, -20, 0, 20, 40, 60, 80, 100, 120])
    plt.savefig(str(output_dir / "doctor.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['doctorID', 'dataset'], column=['grading_score'], grid=False, rot=45, figsize=(9.67, 8),
                         return_type='both')
        export_data(boxplot=r[0], out=output_dir / "doctor_id-dataset.dat")
        plt.savefig(str(output_dir / "doctor-dataset.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['doctorID', 'network'], column=['grading_score'], grid=False, rot=90, figsize=(11, 8),
                         return_type='both')
        export_data(boxplot=r[0], out=output_dir / "doctorID-network.dat")
        plt.savefig(str(output_dir / "doctor-network.png"), dpi=600)

    if type == "boxplot":
        r = data.boxplot(by=['imageName'], column=['grading_score'], rot=90, grid=False, figsize=(15, 10),
                         return_type='both')
        export_data(boxplot=r[0], out=output_dir / "images.dat")
        plt.savefig(str(output_dir / "images.png"), dpi=600)

    if show is True:
        plt.show()


# @analyze.command()
# @click.option("-i", "--input-file", type=click.Path(exists=True),
#               help="A CSV file with aggregated survey data. For survey type 1 it must "
#                    "have columns 'correct' of type boolean and 'certainty' of integer type since "
#                    "these columns are used to calculate grading score.")
# @click.option("-o", "--output-file", type=click.Path(exists=False),
#               help="Where to save data with grading scores.")
def calculate_scores(input_file, output_file):
    """Calculates integer grading scores for pairs (answer correctness, certainty).

    To calculate grading score a following scheme is used:
    - Absolute values for grades based on certainty:
        - certainty 1 - score  20
        - certainty 2 - score  40
        - certainty 3 - score  60
        - certainty 4 - score  80
        - certainty 5 - score 100

    - if field 'correct' is of value 0,                     grade = 0
    - if field 'correct' is of value 1 (correct answer),    grade = certainty score
    - if field 'correct' is of value -1 (incorrect answer), grade = -certainty score
    """
    print(f">> Calculating grading scores for data on path {input_file}...")

    data = pd.read_csv(input_file)

    data['grading_score'] = 0
    data.loc[data.correct != 0, 'grading_score'] = data.loc[data.correct != 0, 'certainty'] * 20
    data.loc[data.correct == -1, 'grading_score'] = 0 - data.loc[data.correct == -1, 'grading_score']

    data.to_csv(output_file, index=True)

    print(f">> Done.")


@analyze.command()
@click.option("-i", "--input-file", type=click.Path(exists=True), required=True,
              help="A CSV file containing aggregated survey results along with 'grading_score' column.")
def calculate_stats(input_file):
    """todo"""
    data = pd.read_csv(input_file)
    data = data[data['surveyType'] == 'regular']  # do not use data from control surveys

    print("\n>> Group by: DATASET")
    print(data.groupby(['dataset', 'grading_score']).size())

    print("\n>> Group by: NETWORK")
    print(data.groupby(['network', 'grading_score']).size())

    print("\n>> Group by: DOCTOR")
    print(data.groupby(['doctorID', 'grading_score']).size())


commands = click.CommandCollection(sources=[analyze])

if __name__ == '__main__':
    # analyze()
    # calculate_stats()
    # calculate_scores()
    plot()